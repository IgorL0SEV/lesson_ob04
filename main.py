#
# Цель: закрепить понимание и навыки применения принципа открытости/закрытости
# (Open/Closed Principle), одного из пяти SOLID принципов
# объектно-ориентированного программирования. Принцип гласит, что программные сущности
# (классы, модули, функции и т.д.) должны быть открыты для расширения, но закрыты для модификации.
#
# Задача: Разработать простую игру, где игрок может использовать различные типы оружия
# для борьбы с монстрами. Программа должна быть спроектирована таким образом, чтобы
# легко можно было добавлять новые типы оружия, не изменяя существующий код бойцов или механизм боя.
#
# Исходные данные:
# Есть класс Fighter, представляющий бойца.
# Есть класс Monster, представляющий монстра.
# Игрок управляет бойцом и может выбирать для него одно из вооружений для боя.
#
# Шаг 1: Создайте абстрактный класс для оружия
# Создайте абстрактный класс Weapon, который будет содержать абстрактный метод attack().
#
# Шаг 2: Реализуйте конкретные типы оружия
# Создайте несколько классов, унаследованных от Weapon, например, Sword и Bow.
# Каждый из этих классов реализует метод attack() своим уникальным способом.
#
# Шаг 3: Модифицируйте класс Fighter
# Добавьте в класс Fighter поле, которое будет хранить объект класса Weapon.
# Добавьте метод change_weapon(), который позволяет изменить оружие бойца.
#
# Шаг 4: Реализация боя
# Реализуйте простой механизм для демонстрации боя между бойцом и монстром, исходя из выбранного оружия.


from abc import ABC, abstractmethod

# Абстрактный класс Weapon, который определяет общий интерфейс для всех типов оружия.
class Weapon(ABC):
    @abstractmethod
    def attack(self):
        pass

# Класс Sword, который реализует атаку с использованием меча.
class Sword(Weapon):
    def attack(self):
        return "наносит удар мечом"

# Класс Bow, который реализует атаку с использованием лука.
class Bow(Weapon):
    def attack(self):
        return "стреляет из лука"

# Класс Fighter представляет бойца и содержит ссылку на объект Weapon.
class Fighter:
    def __init__(self, name):
        self.name = name
        self.weapon = None  # Оружие по умолчанию отсутствует

    # Метод для смены оружия бойца
    def change_weapon(self, weapon):
        self.weapon = weapon
        print(f"{self.name} выбирает {self.weapon.__class__.__name__.lower()}.")

    # Метод для выполнения атаки
    def attack(self):
        if self.weapon:
            print(f"{self.name} {self.weapon.attack()}.")
        else:
            print(f"{self.name} не имеет оружия для атаки.")